// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import {Math} from "@lyrafinance/protocol/contracts/libraries/Math.sol";
import "./BaseHedgingTestHelper.sol";

contract ForkTestRehedgeForMultipleStrikes is BaseHedgingTestHelper {
    uint256 strikeID_1 = 66;
    uint256 optionsAmount_1 = 2e18;
    uint256 strikeID_2 = 63;
    uint256 optionsAmount_2 = 3e18;

    function setUp() external {
        startBlock = 105591673; // Jun-14-2023 10:35:23 PM +UTC
        vm.rollFork(startBlock - 5);
        vm.startPrank(deployer);
        accountImplementation = new Account_();
        accountFactory = new AccountFactory(
            address(accountImplementation),
            lyraRegistry,
            ethOptionMarket,
            ethOptionToken,
            ethPerpsMarket,
            addressResolver,
            usdc,
            sUSD,
            SynthetixPerpsAdapter.SNXPerpsParameters({
                targetLeverage: targetLeverage,
                priceDeltaBuffer: 1050000000000000000
            })
        );
        vm.stopPrank();

        vm.prank(user);
        userAccount = Account_(accountFactory.newAccount());
        fundAccount(user);
        vm.makePersistent(address(accountImplementation), address(accountFactory), address(userAccount));
        vm.makePersistent(user);

        setupBuyHedgeCall();
    }

    function setupBuyHedgeCall() internal {
        vm.startPrank(user);
        usdc.transfer(address(userAccount), 5000e6);
        sUSD.transfer(address(userAccount), 5000e18);
        userAccount.buyHedgedCall(strikeID_1, optionsAmount_1);
        vm.stopPrank();

        OptionToken.OptionPosition[] memory optionTokens = ethOptionToken.getOwnerPositions(address(userAccount));
        assertEq(optionTokens.length, 1);
        assertEq(optionTokens[0].strikeId, strikeID_1);
        assertEq(uint(optionTokens[0].optionType), uint(OptionMarket.OptionType.LONG_CALL));

        bytes
            memory priceUpdateData = hex"01000000030d00be4cf2aaaa23856f4a21db8a5862e5724178c962bf3c223f80f3311bfc39bdbc3b7bab507bd2626f14df54a97c278eef1a4168f0e3736f40d881163a0a307784010126b4a148a4e80fb3a09c37c8b28a7da0cd7ec775f0b5cf4855789ad74b2117a26ca058467823b0762f65bcd34301bf93d0b81448e434c0af77d022697e8bf32c0102520ed67098c09d8dafc109ebba48811054923357b3b3c73c9a304789edc361a80056b2b2bb0d95782c970328c4352f0aa0f526cf7bac215da6c9961bd4a34a42000496bb22627327b9c5cb102887745ac4732418aeb340a089f931e299cd0628303d65f2c582dd9ad2dadba5d069a6c15781cf8fdc4fb5afdd9cb3df7a61cef166240008b4e473adfe0519f96e3a5f1ca0e9e11b77ecd53515b187cc8df5f02255dbd39e0667fdaf079d38c48ec9d3f56705bdbef5692f93cc3770b02a08682a8c58ca91000adacc95a55ff36d725859cb3114b05b5f40a7b73a92f32180ce5458dce252c19c5b8e12b6a403b70b50f9b15cbcbec49790ab450543d219224571b281b7bcd0bf010b89a2d24da03f0620ddb5799da08b426924ba589882f1ca14adfae4c8ee7a368c0d2eeded8f99cac6b79ae024ce2d42ef2a90cb0e1040f6a760ede4574a54dd20010cd5607dba0952a7ad376daf2700090865207a52fdf796b859eafbfb0d8fe7cda238533b5b83a1994bd70757b8e6e56a3c80c19467cf91ca44e029d37b8fa82343000df327738230c4ca4c3ad37a7e0a6017854ce62f7932a1d35ead8bc84514803ada2612bafbae47948c39e23f14eb4f3197173460da718fe7dade4614e3614f5eba010f4c66c23f9090fa4c323b19915248e90a436d75d1d5bf187ec026a6dc18e898120ffd114df5ef450fa9246ed954d44c780c3a2a8afcbedf3e3af7b9b67e4f4ab6011087b0d1d1f30ecccaf9cf279e38e4ffe189bcf4b133ed1c045836d5e3852bd58d4445a5ad9a7b26b6cbe5b93948e7c94aca3e897047db165721c39965966a970e01118da950f20bd61e2a60eb0b4667d0f0d735c07a88339145224e14e67357c20408110b42faceb6ce872394c8f3fdc2bac1ae5f544864a59a62798ab69a758b3c6601128fe7d0f91d889425ce8d019f14cbf9f9869b6304b75a9c39659f0d94d7d8516b62fe617f43bc041cc2a731240967ec1b898246679701abf7c19eb35d92c33ab700648a40a700000000001af8cd23c2ab91237730770bbea08d61005cdda0984348f3f6eecb559638c0bba0000000001c440e3d0150325748000300010001020005009d04028fba493a357ecde648d51375a445ce1cb9681da1ea11e562b53522a5d3877f981f906d7cfe93f618804f1de89e0199ead306edc022d3230b3e8305f391b0000000266a914a72000000000697b6ecfffffff8000000268f075a480000000007ff1de3010000000c0000000e00000000648a40a700000000648a40a700000000648a40a6000000266a914a72000000000697b6ec00000000648a40a6e6c020c1a15366b779a8c870e065023657c88c82b82d58a9fe856896a4034b0415ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce571700000027e7cad21c00000000084cc950fffffff8000000280f6d8e9000000000097a72d301000000070000000800000000648a40a700000000648a40a600000000648a40a500000027e7cad21c00000000084cc85600000000648a40a5c67940be40e0cc7ffaa1acb08ee3fab30955a197da1ec297ab133d4d43d86ee6ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000002676e1aacc00000000050d0f34fffffff8000000269e5907800000000005472f8201000000190000002000000000648a40a700000000648a40a700000000648a40a60000002676bf364000000000052f83c000000000648a40a58d7c0971128e8a4764e757dedb32243ed799571706af3a68ab6a75479ea524ff846ae1bdb6300b817cee5fdee2a6da192775030db5615b94a465f53bd40850b50000002670a0ff8c000000000b55164bfffffff800000026928a7628000000000c43547501000000080000000900000000648a40a700000000648a40a700000000648a40a60000002670a0ff8c000000000b55164b00000000648a40a6543b71a4c292744d3fcf814a2ccda6f7c00f283d457f83aa73c41e9defae034ba0255134973f4fdf2f8f7808354274a3b1ebc6ee438be898d045e8b56ba1fe1300000000000000000000000000000000fffffff80000000000000000000000000000000000000000000000000800000000648a40a700000000648a40a70000000000000000000000000000000000000000000000000000000000000000";
        // fast forward chain and execute
        executeOffchainDelayedOrder(startBlock, priceUpdateData, address(userAccount));
        uint256 newBlock = 105591748; // Jun-14-2023 10:37:53 PM +UTC
        vm.rollFork(newBlock - 5);
        vm.prank(user);
        userAccount.buyHedgedCall(strikeID_2, optionsAmount_2);

        optionTokens = ethOptionToken.getOwnerPositions(address(userAccount));
        assertEq(optionTokens.length, 2);
        assertEq(optionTokens[1].strikeId, strikeID_2);
        assertEq(uint(optionTokens[1].optionType), uint(OptionMarket.OptionType.LONG_CALL));
        int256 delta_1 = userAccount.getDelta(strikeID_1);
        int256 delta_2 = userAccount.getDelta(strikeID_2);
        int256 totalHedgedDelta = ((int(optionsAmount_1) * delta_1 * int(-1)) +
            (int(optionsAmount_2) * delta_2 * int(-1))) / 1e18;

        priceUpdateData = hex"01000000030d00e04175de35b8409af1352bc720579233ea9bf521c469c311b18ed00f4fd87bfd345244a8f838221cef13e9d05485e0e2e92e9d26564216ccf72d3b3577d5ab8600032dc2a3a649cc8f5111b636bcdb5bbe3f0dde06cd115d18cb10628639c909043a09c92292872c2aacbb060d7c5bc39aeff410f10b318c74bf573bd3ad136609f10004ad52852313323715199cd599aad713bbd2614fa5498d42287f97b8e2a48b884f63d64ac5489f02904c0d8da6d124d1308eddd6850dea00b9987b5db64b159ee200065955b606c4805b060a659c0ffd9d3d26e958ea948be3dcad7873456828bb05e66700c7f39d5dda8d917e875831e2ad3d7ff170aad60f91f9dd958856709a619001084a8d4ed88fd6d9f8ebd2c977444ceb54ca5996d39f05509117c080379e380c695fa362c3dbb7e34feac689ddd9546832980f583675185290cbfab8453a52b131000ba925ec20c3902b46293c0e7847dc79386c494118e01ec0b8dbf9eb5d413e1242769349a7eb82417cadb6cfcbb472d57046873eedc5554943c70d07a770438556010c754a532900ab306cfd02f7d0262fd7eaf9064ba9aad3fb4b5109a0b4908fd88d584f0b8aeae0eb7dc365aec063c03e7f3160ff9f920da7fb6fbf94c6358886aa000d900d3f819867206e711f79d280d5e0a10241ac6ead6415634685dc52695c7a0c0c25a801c593f19ddccd3e235a069bebf5ffdf2d245a8fda913b3f2d03186f61000ecfe4e8d4cb45575e9255782484de909793300d33ab7a78f709262e4de73c152f6f901b403bf265ce0bde69d995ece02adb845b5997155f43957b261c56ab3df7000f4482901206ff0546f706b42a0511bfe82c8735ca6e12cd3e6ff2ba8b44ac5e2628cb4e5d1685b26f1cec3c0e2ff5c5f28e1594ed501dc678d5cb91058fdbd96b0110d6620493421b5656e1533106fd54bfc8262e0169e47612223015af23b6f3fa9b4ff69e2ea9dafee6e3374d8de579195b62893b2b8558538c550509baf83c0e990011d1f11b53e0f92b6221f7dcbdbcbb72b50eeb9e055f81b8e768574d1474faf970457a3e85d2cf43cc90f49a90b8e436262f5acadbeaa1d835feb92db376c72f6d001277ffd5846f1d1e034437c6acde6b2c7bc56e4e49b6adb9aa62dffb5557ab87ae3407b9a5ff926db2f6763fd11b32893d4acf3c07eb6e66f3ff7a958cf163283800648a413c00000000001af8cd23c2ab91237730770bbea08d61005cdda0984348f3f6eecb559638c0bba0000000001c441ae80150325748000300010001020005009d04028fba493a357ecde648d51375a445ce1cb9681da1ea11e562b53522a5d3877f981f906d7cfe93f618804f1de89e0199ead306edc022d3230b3e8305f391b00000002664f2e6330000000007711748fffffff8000000268d0963800000000007eec048010000000c0000000e00000000648a413c00000000648a413c00000000648a413b0000002664f2e633000000000771174800000000648a413ae6c020c1a15366b779a8c870e065023657c88c82b82d58a9fe856896a4034b0415ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce571700000027e26cb69f0000000007b8035ffffffff8000000280d4ec1880000000009691dbd01000000070000000800000000648a413c00000000648a413c00000000648a413b00000027e26cb69f0000000007b8035f00000000648a413ac67940be40e0cc7ffaa1acb08ee3fab30955a197da1ec297ab133d4d43d86ee6ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000002671aa02a5000000000469719cfffffff8000000269c6f1d8800000000054533c8010000001a0000002000000000648a413c00000000648a413c00000000648a413b0000002671bd1575000000000475ed8b00000000648a413a8d7c0971128e8a4764e757dedb32243ed799571706af3a68ab6a75479ea524ff846ae1bdb6300b817cee5fdee2a6da192775030db5615b94a465f53bd40850b50000002666e0a18c00000000081e4f7bfffffff80000002690966a70000000000c28726801000000080000000900000000648a413c00000000648a413c00000000648a413b0000002666e0a18c00000000081e4f7b00000000648a413a543b71a4c292744d3fcf814a2ccda6f7c00f283d457f83aa73c41e9defae034ba0255134973f4fdf2f8f7808354274a3b1ebc6ee438be898d045e8b56ba1fe1300000000000000000000000000000000fffffff80000000000000000000000000000000000000000000000000800000000648a413c00000000648a413b0000000000000000000000000000000000000000000000000000000000000000";

        executeOffchainDelayedOrder(newBlock, priceUpdateData, address(userAccount));
        // check that the hedged delta amount
        assertEq(totalHedgedDelta, userAccount.getCurrentPerpsAmount());
        // check that the leverage for perps on snx is in the ballpark range.
        // It might not be exact because of the time difference between submitting and executing order
        uint256 currentLeverage = uint256(userAccount.currentLeverage() * int(-1));
        assertApproxEqAbs(targetLeverage / 1e16, currentLeverage / 1e16, 2);
    }

    function testReHedgewhenDeltaDrop() external {
        // foundry has some weird bugs for the optimism fork.
        // if the sUSD balance is not checked here than forge resets it to 0.
        assertTrue(sUSD.balanceOf(address(userAccount)) > 0);
        assertTrue(usdc.balanceOf(address(userAccount)) > 0);

        int256 oldHedgedDelta = userAccount.getCurrentPerpsAmount();
        uint256 newBlock = 105628397; // Jun-15-2023 06:59:31 PM +UTC

        vm.rollFork(newBlock - 5);
        // After rolling the chain, the position opened by userAccount gets overwritten.
        // This is because the positionID opened by the test was actually opened and owned by another address onchain
        // Fake this by buying an option with same strikeID and Size to test reHedging logic.
        assertEq(ethOptionToken.getOwnerPositions(address(userAccount)).length, 0);
        buyCallOption(strikeID_1, optionsAmount_1);
        buyCallOption(strikeID_2, optionsAmount_2);

        vm.startPrank(user);
        userAccount.reHedgeDelta();

        int256 newDelta_1 = userAccount.getDelta(strikeID_1);
        int256 newDelta_2 = userAccount.getDelta(strikeID_2);

        int256 newHedgedDelta = (int(optionsAmount_1) *
            newDelta_1 *
            int(-1) +
            int(optionsAmount_2) *
            newDelta_2 *
            int(-1)) / 1e18;
        bytes
            memory priceUpdateData = hex"01000000030d00c2f1c94fac8a45be26f89d5c7aab4d87f4e3a2f6ed32596ab57c22dc1ef0167f75fd1a2eaf8adf8adfc8797255473fa7e2357a31cf1b1a7db99f1181607141a301026022925e59371680330c2517f76ada85ab03c7a51ab8edce96afeefcedb9682e58f566e9d25a6280c9b4919b09e07735309ec71c022aec13fdac871bb58d7ad30003f41709000480c5974e605c3aa3f1be71894a1515b46eb377255a27870bf457621f513aafa28194f2aab89c366cf57ad511e58f4155cc6e7e1d606b0211ee695800049a5e803b5191c64107b7e29ef0c273276c45a7b12164253eca13dde2cd56673454d1584b121bc6e811f06dc87aabd6ffd6b0f028a202281cf0fc6ab85808b194010810f0d4e16ede2a9f152481f43e338f4d8cc1a66222cdb4d3968411b8195a50f52cf657402d3b6efdd3aa98b7f81e85a86324409d33541f13f7553a8ee86977c9000a14b2441606495efffcbc2fb2d11c768f1941b744855cbd53135c6770acda33c35133f2a245396695d1da263a5f2955be4d8be257e26febbdca5e08cd9c30e434010b0c8f34761c7cffd0f67daf804044f89e07bd32ca7cbb43b546969299850ee2cd3369dafce163c701b6c18889ad0c82674b9a091ae38b2c5981e4691a5b82522f000c8402605096d3d7a1071f0f8cc537950ae41f079dc3584da18fee18c936a68a28758fbdf8428b8cc14ff1a2207f948aaa05d62f35ba4524f10566e8b953551643010dca04234cc1a4058c430bc0a35014b9e251cb298b64cfdddf4b843e5537cb50c97a354a72792354df3fb361c0c8647eb4f3c5dd51092ff7bf529c423c9e96cf12010eb82e4777f99a33ffa249f9ec53894fde5542799b2c9cb64b81f274d1f6019b8f05ba49f4a4469a1ea9e2715930d4d3490c836a04d3f02bd6c9ebff62dd52c3dc000f50fc91a49d20d85551effd00dc240d66aae34108e220c352f40890514efbaee465fa04ac7061327c41331d7d9a643f99b37cbd432460adf28aa3899b6a6926a50111bf28437b8fc6e3fe56ccd6c475348efe46c824b7072e8eb23b3c5657b97232cf184178b72fccb849823697366f6ea34ee605f9ed7ea2263f9efa7be025222e4101123daeefe3655dfc141840cb9d3c5d19aff4f354959a01e7e15529a59e18d997305aeb6ca014c9fe16370cd8de409ff4be1e5988e8fe115654cd340607964e987d01648b5f9000000000001af8cd23c2ab91237730770bbea08d61005cdda0984348f3f6eecb559638c0bba0000000001c5c3be60150325748000300010001020005009d04028fba493a357ecde648d51375a445ce1cb9681da1ea11e562b53522a5d3877f981f906d7cfe93f618804f1de89e0199ead306edc022d3230b3e8305f391b000000026b96a3e3600000000069da66afffffff8000000265a4ec1600000000008058c76010000000c0000000e00000000648b5f9000000000648b5f8f00000000648b5f8e00000026b939baa10000000007516a2500000000648b5f8ee6c020c1a15366b779a8c870e065023657c88c82b82d58a9fe856896a4034b0415ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce57170000002848149400000000000981dd56fffffff800000027db93055000000000097fa6cd01000000070000000800000000648b5f9000000000648b5f8f00000000648b5f8e0000002848149400000000000981ecf600000000648b5f8ec67940be40e0cc7ffaa1acb08ee3fab30955a197da1ec297ab133d4d43d86ee6ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace00000026c708cd0000000000073df160fffffff8000000266450dbd00000000006becfed010000001a0000001e00000000648b5f9000000000648b5f9000000000648b5f8f00000026c6c422e00000000007829b8000000000648b5f8d8d7c0971128e8a4764e757dedb32243ed799571706af3a68ab6a75479ea524ff846ae1bdb6300b817cee5fdee2a6da192775030db5615b94a465f53bd40850b500000026be70dbaa000000000c811b8dfffffff800000026511eb4600000000010c851a801000000080000000900000000648b5f9000000000648b5f8f00000000648b5f8e00000026be70dbaa000000000c811b8d00000000648b5f8d543b71a4c292744d3fcf814a2ccda6f7c00f283d457f83aa73c41e9defae034ba0255134973f4fdf2f8f7808354274a3b1ebc6ee438be898d045e8b56ba1fe1300000000000000000000000000000000fffffff80000000000000000000000000000000000000000000000000700000000648b5f9000000000648b5f8f0000000000000000000000000000000000000000000000000000000000000000";
        // fast forward chain and execute
        executeOffchainDelayedOrder(newBlock, priceUpdateData, address(userAccount));

        assertTrue(oldHedgedDelta != newHedgedDelta);
        // check that the new perps amount is equal to
        assertEq(newHedgedDelta, userAccount.getCurrentPerpsAmount());
        // check that the leverage for perps on snx is in the ballpark range.
        // It might not be exact because of the time difference between submitting and executing order
        uint256 currentLeverage = uint256(userAccount.currentLeverage() * int(-1));
        assertApproxEqAbs(targetLeverage / 1e16, currentLeverage / 1e16, 2);
    }
}
