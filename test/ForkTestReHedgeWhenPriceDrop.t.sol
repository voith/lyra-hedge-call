// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import {Math} from "@lyrafinance/protocol/contracts/libraries/Math.sol";
import "./BaseHedgingTestHelper.sol";

contract ForkTestReHedgeWhenPriceDrop is BaseHedgingTestHelper {
    function setUp() external {
        targetBlock = 107965799; // Aug-08-2023 09:32:55 PM +UTC
        vm.rollFork(targetBlock - 5);
        vm.startPrank(deployer);
        accountImplementation = new Account_();
        accountFactory = new AccountFactory(
            address(accountImplementation),
            lyraRegistry,
            ethOptionMarket,
            ethPerpsMarket,
            addressResolver,
            usdc,
            sUSD,
            SynthetixPerpsAdapter.SNXPerpsV2PoolHedgerParameters({
                targetLeverage: 1100000000000000000,
                priceDeltaBuffer: 1050000000000000000
            })
        );
        vm.stopPrank();

        vm.prank(user);
        userAccount = Account_(accountFactory.newAccount());
        fundAccount(user);
        vm.makePersistent(address(accountImplementation), address(accountFactory), address(userAccount));
        vm.makePersistent(user);

        strikeID = 262;
        optionsAmount = 2;
        setupBuyHedgeCall();
    }

    function setupBuyHedgeCall() internal {
        vm.startPrank(user);
        usdc.transfer(address(userAccount), 10000e6);
        sUSD.transfer(address(userAccount), 50000e18);
        userAccount.buyHedgedCall(strikeID, optionsAmount);
        vm.stopPrank();

        OptionToken.OptionPosition[] memory optionTokens = ethOptionToken.getOwnerPositions(address(userAccount));
        assertEq(optionTokens.length, 1);
        assertEq(optionTokens[0].strikeId, strikeID);
        assertEq(uint(optionTokens[0].optionType), uint(OptionMarket.OptionType.LONG_CALL));

        int256 delta = userAccount.getDelta(strikeID);
        int256 hedgedDelta = int(optionsAmount) * delta * int(-1);
        oldDelta = delta;

        bytes
            memory priceUpdateData = hex"01000000030d0008e7881301d2b9548ade09f491ca533472e4ce514751126c1e6f385932527e271170a14fa80d7e08281dcb8eae2c17ffe80d5383d4eb59aa97b3466071fc5e5101013ed14784a0dc47881865d279aaf9f5155a930963d0f2be2a416c31c1c53e78322fb67b66b0ae2fb378f283a98450bd47fe2c81cdf641fa4dbf15b812959cf7ba01022b0f28168f4503db8456cf398d21d04d462eeeb4b4bf4a3d1117034bf3231c02599c29d297905ddcdbde3405bcc66e93d381b223caa1ca4df3ca15429d59c7e80003efecb1333e4ea5e12fd2a0f8267ce555ceca4fd85e5217b205f161e93b0b3d45140816d03abe82894ea7ca4012407368362d2932ac91705a315ba467c2d38f860004fe33eded697962a6884f7d41d9555915a95b1cedbb1f497fd2ee7fcb76b0209c48f4cd6e2740a09536401d4ed5bbb3bc2be2dbd9c4c9a23ef35cb328eae4c96e010a984146fa535b225181782aa8bf765f1ae2b145e62d91e59be1e1ad097d0716a127ad90bc6cc1fff2dbb037a531b2190cc8acad160503b7fe7b00535e626766f2000bae896af911915e93ae12f72470289c09c81a0c8af7ddd89d83b3857191325ab516e7b371ee18288fc9620eea760a089e56cd24ac42d0a9364e7b80a8038c063a000c62dbfe7a36067cf576e52960da5ca025415512421d4747c412941fb89dc0b13a155fb6aacdbd4761a8bd042694c5e774b190220df080c8ce789c7be0128bc8dc010d96bd0c6be7ce8b5a901bd3b32ccfb82269a5edd357caec13e3ea85b86773b0de5ff010037208dfe55a0156cdfcff22da76507965d79ebc8221a9619ca1812101010facbfd0fe74cc9f11dd0ffff2804be57fcd6750bedc488c29b2c53da951476eb93b447afd0326bdc4838d2c80fe3db92a5333b2d7e9454479b99bcee63493474801103b675569d49f67dcc87ff1f025eca687c7e9ef20d8b679618bbf4cafd025911634d2a360a892792907641c55c48b8e2221f1609800ed58de5d681d579289498f01111e45245efd57a0ea7da7b1d3dbc3b225d1af72936ddb319391cd33c27d33938358adefc9c2f31babe3b72a75ca37e460f0f511acdfd213bbc2ca47fa77ea87ee011217a88be856f798ea888307945acb0fe84d47f9eef648d0a2b86ebdb8010a1e2c328125b1a83c9d9508f2ef772382dddec2445df610db9b251e809ea5c64338010064d2b48400000000001af8cd23c2ab91237730770bbea08d61005cdda0984348f3f6eecb559638c0bba000000000229d6c810150325748000300010001020005009d04028fba493a357ecde648d51375a445ce1cb9681da1ea11e562b53522a5d3877f981f906d7cfe93f618804f1de89e0199ead306edc022d3230b3e8305f391b00000002b57d02f6d000000000a7c9b5ffffffff80000002b550746f00000000008f8d588010000000c0000000f0000000064d2b4840000000064d2b4840000000064d2b4820000002b57d02f6d000000000a7c9b5f0000000064d2b482e6c020c1a15366b779a8c870e065023657c88c82b82d58a9fe856896a4034b0415ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce57170000002d3b06f6f4000000001d72baf1fffffff80000002d348e7a6800000000193fca0a01000000070000000a0000000064d2b4840000000064d2b4840000000064d2b4820000002d3b06f6f40000000016e5cf0c0000000064d2b481c67940be40e0cc7ffaa1acb08ee3fab30955a197da1ec297ab133d4d43d86ee6ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000002b60465c4f00000000065d8da8fffffff80000002b608819f00000000004c36d6d010000001e000000200000000064d2b4840000000064d2b4840000000064d2b4820000002b6061cc9e000000000678fdf70000000064d2b4828d7c0971128e8a4764e757dedb32243ed799571706af3a68ab6a75479ea524ff846ae1bdb6300b817cee5fdee2a6da192775030db5615b94a465f53bd40850b50000002b587bfb82000000000ad75bfdfffffff80000002b5b6fbbf8000000000bb00f71010000000b0000000c0000000064d2b4840000000064d2b4840000000064d2b4820000002b598b2a170000000009c8b9ae0000000064d2b481543b71a4c292744d3fcf814a2ccda6f7c00f283d457f83aa73c41e9defae034ba0255134973f4fdf2f8f7808354274a3b1ebc6ee438be898d045e8b56ba1fe1300000000000000000000000000000000fffffff8000000000000000000000000000000000000000001000000080000000064d2b4840000000064d2b4840000000000000000000000000000000000000000000000000000000000000000";
        // fast forward chain and execute
        executeOffchainDelayedOrder(targetBlock, priceUpdateData, address(userAccount));
        assertEq(hedgedDelta, userAccount.getCurrentPerpsAmount());
    }

    function testReHedgewhenPriceDrop() external {
        int oldHedgedDelta = userAccount.getCurrentPerpsAmount();
        uint256 newTargetBlock = 108354926; // Aug-17-2023 09:43:49 PM +UTC

        vm.rollFork(newTargetBlock - 5);
        vm.startPrank(user);
        userAccount.reHedgeDelta();

        int256 newDelta = userAccount.getDelta(strikeID);
        assertTrue(uint256(oldDelta) > uint256(newDelta));

        int256 newHedgedDelta = int(optionsAmount) * newDelta * int(-1);
        bytes
            memory priceUpdateData = hex"01000000030d00c0748b9f1267b7e9a6c0bf86c4af7173928d828ebb0095f8b8d0088044fd121450dffa629bacd5cbef6dd91e50d4ce5e5e81875dc62963d66b93b798c9d6ffd90101d224b95d99e46279c99724f89e3ab7f9e497f922af07787143328d4e333dae40447a75696e5aa66678eccdb0d030487ea6539c212ca3f5b7c54f88282de45ab20102330e570c822aa3bef57017b4eda2690020b6401add75d6af19fb012b2d9de6b55d2fd86f7621d2857c4dc45c0462da66bec5f91c5df68b4df34314086789af080103d19582960295d2aac803ddf233b08389daa001de6eda22bddfa92c858213238231189459cf702520f9939e8b3a9287e7d937f9432232a2c6ca74e5bb3ab5c09300098b865610b223256994d08e3a5bf773d28e02f3dad6a9ff3c1a6ef066c6aecd5a4476955fa93829f7aa61da2258021bc943d172be3b45149d26e37dead38685a2010aa2725ccaa2113a10d80a36bab7310b036e618fd5f5c97da2b5aa74caadca72ca29ae74b0a5a7874ee57414c8be21640593104b9930ec3e8f15cc00739c94a1d2000b4ecdfdad427c19f82ba185db2384eafc6dc2405d844c203ebbefa8e8ab28e4016caa51ff67431013b75d0392d64e9172da45c9efdbea360494da2d53d7760c48010d8037c256b627109ebe77b51ab403352e80e8c17c554aea9dd65bbe4c85960164315a4c9eb5ccacb7984a39be4dd7f1e03ea1c4e2f37769d92ceaa22588fe6c8b010e69bccaa2959bebf198f118e394123a358afcbd1172fdaa91945aa0605dc9eb011a279ef417e4d88621b74b6c26039f339850f3e06c210bef8b1e649c7bc9d60d000f33813353e284a1d490bf2b15a4ef7e291ebf47315c988b3323d2d415643130fa538435bb4c0afd275f29c02b4e9064abd9d3a5c65ba664f090a3be9cb7ad34490110dc49e50540a56ba7d1403613a96b9f3260bd9f5078b452738e40b32b6aa4921a6e4eda4e1707d6c31a7369c88de0ec35d607be3faea343c75b17e5197cff04490111bb78453a4c711d1976b6f9381d04638f161d5ebae70b7005946bb5ec344fc0f254609b79e5f6632fc0901af1642d2325ed948c2cd3db7fbdfc79090278342e5d01124b847f0681776f69c115a97effac2d5406924a2ef8cdc03cf265cbab2245d4d75d08be60fde83145735d2c28b33e212189225205423d2952f9134e3290199bc20064de949300000000001af8cd23c2ab91237730770bbea08d61005cdda0984348f3f6eecb559638c0bba00000000023b67d830150325748000300010001020005009d04028fba493a357ecde648d51375a445ce1cb9681da1ea11e562b53522a5d3877f981f906d7cfe93f618804f1de89e0199ead306edc022d3230b3e8305f391b000000025d6d57fed00000000177a3679fffffff80000002813c01800000000000a42d7e9010000000c0000000f0000000064de94930000000064de94930000000064de949200000025d4373e2b000000001ff638fa0000000064de9492e6c020c1a15366b779a8c870e065023657c88c82b82d58a9fe856896a4034b0415ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce57170000002791e7d8180000000052245db8fffffff800000029ec690260000000000ed33d3b010000000a0000000b0000000064de94930000000064de94930000000064de94920000002791e7d8180000000038ffc8180000000064de9492c67940be40e0cc7ffaa1acb08ee3fab30955a197da1ec297ab133d4d43d86ee6ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace00000025b9620a00000000003fcc5f6ffffffff80000002814d7e4e8000000000ab4686b010000001d000000200000000064de94930000000064de94930000000064de949200000025b8ac2a9f000000003fdf067f0000000064de94928d7c0971128e8a4764e757dedb32243ed799571706af3a68ab6a75479ea524ff846ae1bdb6300b817cee5fdee2a6da192775030db5615b94a465f53bd40850b500000025be97e5f800000000dd6a404bfffffff8000000280c3afbe00000000016f2919c010000000d0000000d0000000064de94930000000064de94930000000064de949200000025bf2a244000000000dcfa6f400000000064de9492543b71a4c292744d3fcf814a2ccda6f7c00f283d457f83aa73c41e9defae034ba0255134973f4fdf2f8f7808354274a3b1ebc6ee438be898d045e8b56ba1fe1300000000000000000000000000000000fffffff8000000000000000000000000000000000000000002000000080000000064de94930000000064de94910000000000000000000000000000000000000000000000000000000000000000";
        // fast forward chain and execute
        executeOffchainDelayedOrder(newTargetBlock, priceUpdateData, address(userAccount));

        // since delta has reduced old shorts pers > new short perps
        assertTrue(Math.abs(oldHedgedDelta) > Math.abs(newHedgedDelta));
        // check that the new perps amount is equal to
        assertEq(newHedgedDelta, userAccount.getCurrentPerpsAmount());
    }
}
